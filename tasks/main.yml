---
# Install Accelize DRM library from Accelize repository

- name: Ensure minimal APT dependencies are installed
  apt:
    name:
      - apt-transport-https
      - gnupg
      - software-properties-common
    state: present
    install_recommends: false
    update_cache: true
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "Debian"
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Add Accelize DEB repository key
  apt_key:
    url: https://accelize.s3.amazonaws.com/gpg
    id: 9DAED11DB55E7EB0
    state: present
  register: add_repository_key
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "Debian"
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Add Accelize DEB repository
  apt_repository:
    repo: "deb https://accelize.s3.amazonaws.com/deb \
      {{ ansible_distribution_release }} {{ accelize_repository_channel }}"
    state: present
    update_cache: true
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "Debian"
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Add Accelize RPM repository
  get_url:
    url: "https://accelize.s3.amazonaws.com/rpm/\
          accelize_{{ accelize_repository_channel }}.repo"
    dest: "/etc/yum.repos.d/accelize_{{ accelize_repository_channel }}.repo"
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Ensure Accelize EPEL repository is installed on CentOS/RHEL
  package:
    name: epel-release
    state: present
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version | int <= 8

- name: Ensure Accelize DRM library is installed
  package:
    name: libaccelize-drm
    state: present
  retries: 10
  delay: 1
  when:
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Ensure Accelize DRM Python library is installed
  package:
    name: "{{ _python3 }}-accelize-drm"
    state: present
  retries: 10
  delay: 1
  when:
    - accelize_drm_python | bool
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Ensure Accelize DRM developpement package is installed
  package:
    name: "libaccelize-drm-{{ _devel }}"
    state: present
  retries: 10
  delay: 1
  when:
    - accelize_drm_devel | bool
    - not (accelize_drm_from_source | bool)
    - not (accelize_drm_no_install | bool)

- name: Ensure minimal build dependencies are installed
  apt:
    name:
      - git
      - g++
      - libcurl4-openssl-dev
      - libjsoncpp-dev
      - make
      - pkg-config
      - python3-pip
    state: present
    install_recommends: false
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "Debian"
    - (accelize_drm_from_source | bool) or (accelize_drm_build | bool)

- name: Ensure minimal build dependencies are installed
  package:
    name:
      - git
      - gcc
      - gcc-c++
      - jsoncpp-devel
      - libcurl-devel
      - make
      - "{{ _python3 }}-pip"
    state: present
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - (accelize_drm_from_source | bool) or (accelize_drm_build | bool)

- name: Ensure Pip is up to date
  command: "python3 -m pip install -U pip {{ _pip_args }}"
  changed_when: false
  when: (accelize_drm_from_source | bool) or (accelize_drm_build | bool)

- name: Ensure CMake is installed
  pip:
    name: cmake
    executable: pip3
    extra_args: "{{ _pip_args }}"
  retries: 10
  delay: 1
  when: (accelize_drm_from_source | bool) or (accelize_drm_build | bool)

- name: Ensure Python build dependencies are installed
  package:
    name: "{{ _python3 }}-{{ _devel }}"
    state: present
  retries: 10
  delay: 1
  when:
    - (accelize_drm_from_source | bool) or (accelize_drm_build | bool)
    - accelize_drm_python | bool

- name: Ensure Python build dependencies are installed from PIP
  pip:
    name:
      - setuptools
      - wheel
      - cython
    executable: pip3
    extra_args: "{{ _pip_args }}"
  retries: 10
  delay: 1
  when:
    - (accelize_drm_from_source | bool) or (accelize_drm_build | bool)
    - accelize_drm_python | bool

- name: Ensure packaging dependencies are installed
  apt:
    name:
      - dpkg-dev
      - file
      - dpkg-sig
      - gnupg
    state: present
    install_recommends: false
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "Debian"
    - accelize_drm_build_package | bool

- name: Ensure packaging dependencies are installed
  package:
    name:
      - rpm-build
      - rpm-sign
      - gnupg
    state: present
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - accelize_drm_build_package | bool

- name: Ensure Doxygen is installed
  package:
    name: doxygen
    state: present
  retries: 10
  delay: 1
  when:
    - accelize_drm_build_doc | bool
    - ansible_distribution_major_version != '8'

- name: Ensure Doxygen is installed
  dnf:
    name: doxygen
    state: present
    enablerepo: PowerTools
  retries: 10
  delay: 1
  when:
    - accelize_drm_build_doc | bool
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == '8'

- name: Ensure Sphinx is installed
  pip:
    name:
      - sphinx
      - breathe
      - sphinx_rtd_theme
    executable: pip3
    extra_args: "{{ _pip_args }}"
  retries: 10
  delay: 1
  when: accelize_drm_build_doc | bool

- name: Ensure test dependencies are installed
  pip:
    name:
      - pytest
      - tox
      - flake8
      - requests
      - flask
      - dateutils
      - pytest-ordering
    executable: pip3
    extra_args: "{{ _pip_args }}"
  retries: 10
  delay: 1
  when: accelize_drm_test | bool

- name: Ensure C/C++ coverage dependencies are installed
  package:
    name: lcov
  retries: 10
  delay: 1
  when: accelize_drm_coverage | bool

- name: Ensure Python coverage dependencies are installed
  pip:
    name: pytest-cov
    executable: pip3
    extra_args: "{{ _pip_args }}"
  retries: 10
  delay: 1
  when: accelize_drm_coverage | bool

- name: Ensure ABI check dependencies are installed
  package:
    name:
      - abi-dumper
      - abi-compliance-checker
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - accelize_drm_abi_check | bool

- name: Ensure ABI check dependencies are installed
  package:
    name:
      - exuberant-ctags
      - abi-dumper
      - abi-compliance-checker
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "Debian"
    - accelize_drm_abi_check | bool

- name: Create Universal Ctags temporary directory
  # Force to update due to conflict with "ctags" package
  tempfile:
    state: directory
    prefix: ctags_
  register: ctags_tmp
  notify: Clean up Universal Ctags temporary directory
  when:
    - ansible_os_family == "RedHat"
    - accelize_drm_abi_check | bool
  tags: molecule-idempotence-notest

- name: Download and extract Universal Ctags release tarbal
  unarchive:
    src: "https://api.github.com/repos/universal-ctags/ctags/tarball"
    dest: "{{ ctags_tmp.path }}"
    remote_src: true
    extra_opts: ['--strip-components=1']
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - accelize_drm_abi_check | bool
  tags: molecule-idempotence-notest

- name: Ensure Universal Ctags build dependencies are present
  yum:
    name:
      - gcc
      - make
      - pkgconfig
      - autoconf
      - automake
      - libseccomp-devel
      - jansson-devel
      - libyaml-devel
      - libxml2-devel
    state: present
    install_weak_deps: false
  retries: 10
  delay: 1
  when:
    - ansible_os_family == "RedHat"
    - accelize_drm_abi_check | bool

- name: Build and install Universal Ctags
  command: "{{ item }}"
  args:
    chdir: "{{ ctags_tmp.path }}"
  with_items:
    - ./autogen.sh
    - ./configure --prefix=/usr
    - make -j
    - make install
  when:
    - ansible_os_family == "RedHat"
    - accelize_drm_abi_check | bool
  tags: molecule-idempotence-notest

- name: Create Accelize DRM temporary Git clone directory
  tempfile:
    state: directory
    prefix: accelize_drm_
  register: accelize_drm_tmp
  notify: Clean up Accelize DRM temporary clone directory
  when:
    - accelize_drm_git_clone is not defined
    - accelize_drm_from_source | bool
  changed_when: false

- name: Update Accelize DRM Git clone directory path
  set_fact: accelize_drm_git_clone="{{ accelize_drm_tmp.path }}"
  when:
    - accelize_drm_git_clone is not defined
    - accelize_drm_tmp.path is defined

- name: Ensure Accelize DRM Git repository is cloned
  git:
    repo: 'https://github.com/Accelize/drmlib.git'
    dest: "{{ accelize_drm_git_clone }}"
    version: "{{ accelize_drm_git_ref }}"
    depth: 1
    recursive: true
  retries: 10
  delay: 1
  when: accelize_drm_git_clone is defined

- name: Ensure Accelize DRM build directory exists
  file:
    path: "{{ accelize_drm_git_clone }}/build"
    state: directory
  when: accelize_drm_from_source | bool

- name: Ensure Accelize DRM is installed from sources
  command: "{{ item.command }}"
  with_items:
    # Use "/usr" prefix to install in same path as packages
    - command: "cmake {{ accelize_drm_python | bool |
                ternary('-DPYTHON3=ON ', '') }}\
                -Wno-dev -DCMAKE_INSTALL_PREFIX:PATH=/usr .."
      creates: "{{ accelize_drm_git_clone }}/build/Makefile"
    - command: make -j
      creates: "{{ accelize_drm_git_clone }}/build/libaccelize_drm.so"
    - command: make install
      creates: /usr/include/accelize/drm.h
  args:
    chdir: "{{ accelize_drm_git_clone }}/build"
    creates: "{{ item.creates }}"
  when: accelize_drm_from_source | bool

- name: Ensure Accelize DRM credentials parent directory exists
  file:
    path: "{{ accelize_drm_cred_dst | dirname }}"
    state: directory
  when: accelize_drm_cred_src is defined

- name: Create Accelize DRM credentials file
  copy:
    src: "{{ accelize_drm_cred_src }}"
    dest: "{{ accelize_drm_cred_dst }}"
  when: accelize_drm_cred_src is defined

- name: Ensure Accelize DRM configuration parent directory exists
  file:
    path: "{{ accelize_drm_conf_dst | dirname }}"
    state: directory
  when: accelize_drm_conf_src is defined

- name: Create Accelize DRM configuration file
  copy:
    src: "{{ accelize_drm_conf_src }}"
    dest: "{{ accelize_drm_conf_dst }}"
  when: accelize_drm_conf_src is defined
